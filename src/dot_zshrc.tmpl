export XDG_CONFIG_HOME="$HOME/.config"
export EDITOR='subl -w'
export GOPATH="$HOME/Code/tomatao/go"
{{ $token_name := printf "npm token for %s" .chezmoi.hostname -}}
{{ $token := (index (lastpassRaw $token_name) 0).note -}}
{{- if $token -}}
export NPM_TOKEN={{ $token | quote }}
{{- else -}}
export NPM_TOKEN="hostname-specific-token-not-found"
{{- end }}
export PAGER='moor'
export PGUSER="postgres"
export PNPM_HOME="$HOME/Library/pnpm"
export PROTO_HOME="$HOME/.proto"
export PYENV_ROOT="$HOME/.pyenv"
export STARSHIP_CONFIG="$XDG_CONFIG_HOME/starship.toml"

function add_to_path_if_exists() {
  local dir="$1"
  local colon_path="${PATH//:/:}"
  colon_path="${colon_path// //}"

  if ! [ -d "$dir" ]; then
    return
  fi

  if ! [[ $colon_path == *":$dir:"* ]]; then
    export PATH="$PATH:$dir"
  fi
}

function remove_from_path() {
  export PATH=$(echo $PATH | sed -E -e "s;:$1;;" -e "s;$1:?;;")
}

add_to_path_if_exists "/usr/local/bin"
add_to_path_if_exists "$HOME/.bin"
add_to_path_if_exists "$PROTO_HOME/shims"
add_to_path_if_exists "$HOME/.local/bin"
add_to_path_if_exists "$HOME/.cargo/bin"
add_to_path_if_exists "$GOPATH/bin"
add_to_path_if_exists "$PYENV_ROOT/shims"
# add_to_path_if_exists "$PROTO_HOME/bin"

export PATH

alias o=open
alias reload="exec $SHELL -l"
alias g="git"

alias ~="cd ~"
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias -- -="cd -"

alias ls="lsd"
alias l='ls -lF'
alias li='ls -lF --ignore-config'
alias la='ls -AlF'
alias lai='ls -AlF --ignore-config'
alias las='ls -AlFS'
alias lt='ls --tree -d'
alias lti='ls --tree --ignore-config'

alias brewupdate="brew update && brew upgrade && brew upgrade --cask && brew cleanup"

alias hiddenShow="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
alias hiddenHide="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"

# Recursively delete `.DS_Store` files
alias cleanup="find . -type f -name '*.DS_Store' -ls -delete"

# Kill all running containers.
alias dockerkillall='docker kill $(docker ps -q)'
# Delete all stopped containers.
alias dockercleanc='printf "\n>>> Deleting stopped containers\n\n" && docker rm $(docker ps -a -q)'
# Delete all untagged images.
alias dockercleani='printf "\n>>> Deleting untagged images\n\n" && docker rmi $(docker images -q -f dangling=true)'
# Delete all stopped containers and untagged images.
alias dockerclean='dockercleanc || true && dockercleani'

function take() {
  mkdir -p "$@" && cd "$@"
}

function f() {
  find . -name "$1"
}

eval "$(/opt/homebrew/bin/brew shellenv)"

if [ -f $(brew --prefix)/etc/brew-wrap ];then
  source $(brew --prefix)/etc/brew-wrap
fi

if [ -x "$(command -v direnv)" ]; then
  eval "$(direnv hook bash)"
fi

if [ -x "$(command -v pyenv)" ]; then
  eval "$(pyenv init -)"
  eval "$(pyenv virtualenv-init -)"
fi

if [ -x "$(command -v zoxide)" ]; then
  eval "$(zoxide init zsh)"
fi

if [ -x "$(command -v fnm)" ]; then
  eval "$(fnm env --use-on-cd)"
fi

if [ -x "$(command -v starship)" ]; then
  eval "$(starship init zsh)"
fi

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

function vim() {
  # Save current stty options.
  local STTYOPTS="$(stty -g)"

  # Disable intercepting of ctrl-s and ctrl-q as flow control.
  stty stop '' -ixoff -ixon

  # Execute vim.
  command vim "$@"

  # Restore saved stty options.
  stty "$STTYOPTS"
}

function ngrokserver() {
  local port="${1:-9000}";
  ngrok -subdomain=tomatao "${port}"
}

function setjdk() {
  remove_from_path `/usr/libexec/java_home`
  export JAVA_HOME=`/usr/libexec/java_home -v $@`
  export PATH=$JAVA_HOME/bin:$PATH
  java -version
}

# Enable tab completion for `g` by marking it as an alias for `git`
if which brew > /dev/null && [ -f "$(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh" ]; then
  source "$(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh"
fi;

# re-initialise the shell's completion system with brew commands
if type brew &>/dev/null
then
  if [[ ":$FPATH:" != *":$(brew --prefix)/share/zsh/site-functions:"* ]]; then
    FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"
  fi

  autoload -Uz compinit
  compinit
fi

if [ -f "$(brew --prefix)/opt/asdf/libexec/asdf.sh" ]; then
  . "$(brew --prefix)/opt/asdf/libexec/asdf.sh"
fi

__conda_path="$(brew --prefix)/anaconda3";
__conda_setup="$($__conda_path/bin/conda 'shell.bash' 'hook' 2> /dev/null)";
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "$__conda_path/etc/profile.d/conda.sh" ]; then
        . "$__conda_path/etc/profile.d/conda.sh"
    else
        export PATH="$__conda_path/bin:$PATH"
    fi
fi
unset __conda_path
unset __conda_setup

# custom word boundaries
# Define word boundaries to include . and - as separators
# WORDCHARS=${WORDCHARS//[.-]/}
# only a-Z and 0-9 are considered "words"
WORDCHARS=''

# Bind Option+LeftArrow and Option+Backspace for word navigation
bindkey "^[b" backward-word
bindkey "^[f" forward-word
bindkey "^[[1;3D" backward-word
bindkey "^[[1;3C" forward-word
bindkey "^[3~" backward-kill-word

[[ "$TERM_PROGRAM" == "kiro" ]] && . "$(kiro --locate-shell-integration-path zsh)"
